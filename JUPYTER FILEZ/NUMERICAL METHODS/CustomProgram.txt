; YAY WE GET TO MAKE A CUSTOM PROGRAM
; First, everything needs a Lagrangian and a System Derivative. 

; Lagrangian taken from section 1.8.4. 

(define ((L0 m V) local)
  (let ((t (time local))
        (q (coordinates local))
		  (v (velocities local)))
   (- (* 1/2 m (square v)) (V t q))))

(define ((V a GM0 GM1 m) t xy)
  (let ((Omega (sqrt (/ (+ GM0 GM1) (expt a 3))))
        (a0 (* (/ GM1 (+ GM0 GM1)) a))
		  (a1 (* (/ GM0 (+ GM0 GM1)) a)))
	 (let ((x (ref xy 0)) (y (ref xy 1))
	       (x0 (* -1 a0 (cos (* Omega t))))
			 (y0 (* -1 a0 (sin (* Omega t))))
			 (x1 (* +1 a1 (cos (* Omega t))))
			 (y1 (* +1 a1 (sin (* Omega t)))))
	   (let ((r0 (sqrt (+ (square (- x x0)) (square (- y y0)))))
	         (r1 (sqrt (+ (square (- x x1)) (square (- y y1))))))
			(- (+ (/ (* GM0 m) r0) (/ (* GM1 m) r1)))))))

(define ((LR3B m a GM0 GM1) local)
  (let ((q (coordinates local))
        (qdot (velocities local))
		  (Omega (sqrt (/ (+ GM0 GM1) (expt a 3))))
		  (a0 (* (/ GM1 (+ GM0 GM1)) a))
		  (a1 (* (/ GM0 (+ GM0 GM1)) a)))
    (let ((x (ref q 0))                     (y (ref q 1))
	       (xdot (ref qdot 0))               (ydot (ref qdot 1)))
	   (let ((r0 (sqrt (+ (square (+ x a0)) (square y))))
		      (r1 (sqrt (+ (square (- x a1)) (square y)))))
		 (+ (* 1/2 m (square qdot))
		    (* 1/2 m (square Omega) (square q))
			 (* m Omega (- (* x ydot) (* xdot y)))
			 (/ (* GMO m) r0) (/ (* GM1 m) r1))))))

(define ((LR3B1 m a0 a1 Omega GM0 GM1) local)
  (let ((q (coordinates local))
        (qdot (velocities local)))
    (let ((x (ref q 0))                     (y (ref q 1))
	       (xdot (ref qdot 0))               (ydot (ref qdot 1)))
	   (let ((r0 (sqrt (+ (square (+ x a0)) (square y))))
		      (r1 (sqrt (+ (square (- x a1)) (square y)))))
		 (+ (* 1/2 m (square qdot))
		    (* 1/2 m (square Omega) (square q))
			 (* m Omega (- (* x ydot) (* xdot y)))
			 (/ (* GM0 m) r0) (/ (* GM1 m) r1))))))


; LR3B1 is now our Lagrangian. Now we get H and the sysder at the same time.

(define (H-sysder m a0 a1 Omega GM0 GM1)
  (Hamiltonian->state-derivative
    (Lagrangian->Hamiltonian
	   (LR3B1 m a0 a1 Omega GM0 GM1))))

; we now have the Hamiltonian and can presumably just start plotting. 

(define (orbits-map m a0 a1 Omega GM0 GM1)
  (let ((advance (state-advancer H-sysder m a0 a1 Omega GM0 GM1))
           (map-period (/ :2pi Omega))) ;uncertain what this is
	 (lambda (x xdot return fail)
	   (let ((ns (advance
		             (up 0 x xdot)     ; initial state
						 map-period)))           ; integration interval
		  (return ((principal-value :pi) (coordinate ns))
		          (momentum ns))))))

(define win (frame :-pi :pi -330 330))
(graphics-operation win 'resize-window 1000 1000)

(graphics-clear win)

(let ((m 0.01)
      (a0 1.0)
      (a1 1.0)
      (Omega 1.0)
      (GM0 1.0)
      (GM1 1.0))
	   (explore-map
		 win
		 (orbits-map m a0 a1 Omega GM0 GM1)
		 1000))      ; 1000 points for each initial condition